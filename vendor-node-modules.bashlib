#!/usr/bin/env bash
# Borrowed from sam-gentoo-scripts generate-docs.bashlib and adapted for node modules

# Source the common vendor library
. "$(dirname "${BASH_SOURCE[0]}")/vendor-common.bashlib" || { echo "Failed to source vendor-common.bashlib!" ; exit 1 ; }

vendor-node-modules_setup_environment() {
	vendor_common_setup_environment "$1"

	# Node-specific environment variables
	# https://www.electronjs.org/docs/latest/tutorial/installation#skip-binary-download
	# We will always provide a system-wide electron, there's no need to download the binary.
	# I think this should be skipped by the npm and yarn invocations as well, but let's be extra sure.
	export ELECTRON_SKIP_BINARY_DOWNLOAD=1

	vendor_common_cleanup_and_prepare "vendor"
	vendor_common_install_and_unpack "$1"

	dir=$(mktemp -d)
}

vendor-node-modules_generate_vendor() {
	ebegin "Generating vendor dependencies for ${P}"

	pushd "$S" >/dev/null || die "Failed to change to ${S}. Exiting!"

	# Detect package manager and generate vendor dependencies
	if [[ -f "pnpm-lock.yaml" ]]; then
		einfo "Using pnpm to generate vendor dependencies"
		# Clear any existing node_modules to ensure clean state
		rm -rf node_modules

		# Install dependencies with pnpm (--shamefully-hoist forces a 'flat' node_modules structure to make life easier)
		pnpm install --frozen-lockfile --ignore-scripts \
			--shamefully-hoist || die "pnpm install failed!"

	elif [[ -f "yarn.lock" ]]; then
		einfo "Using yarn to generate vendor dependencies"
		# Clear any existing node_modules to ensure clean state
		rm -rf node_modules

		# Install dependencies with yarn
		yarn install --frozen-lockfile --ignore-engines \
			--ignore-platform  --ignore-scripts --link-duplicates || die "yarn install failed!"

	elif [[ -f "package-lock.json" ]]; then
		einfo "Using npm to generate vendor dependencies"
		# Clear any existing node_modules to ensure clean state
		rm -rf node_modules

		# Install dependencies with npm
		npm ci  --verbose --ignore-scripts || die "npm ci failed!"

	elif [[ -f "package.json" ]]; then
		einfo "Using npm (no lockfile) to generate vendor dependencies"
		# Clear any existing node_modules to ensure clean state
		rm -rf node_modules

		# Install dependencies with npm
		npm install --verbose --ignore-scripts || die "npm install failed!"

	else
		eerror "No package.json, pnpm-lock.yaml, yarn.lock, or package-lock.json found in ${S}"
		die "No supported package manager files found"
	fi

	popd >/dev/null || exit 1
	eend ${?} || die "Generating vendor dependencies failed!"
}

# Function to clean up everything in S except node_modules
# This ensures only node_modules and necessary files remain for the tarball
vendor-node-modules_clean_source_directory() {
	ebegin "Cleaning up source directory, keeping only node_modules"

	pushd "$S" >/dev/null || { eerror "Failed to enter $S"; eend 1; return 1; }

	# List of files/directories to preserve
	local preserve_items=(
		"node_modules"
		"package.json"
		"package-lock.json"
		"yarn.lock"
		"pnpm-lock.yaml"
		".nvmrc"
		".node-version"
	)

	local items_to_delete=()
	local item

	# Collect all items in the current directory
	for item in *; do
		# Check if this item should be preserved
		local should_preserve=false
		local preserve_item
		for preserve_item in "${preserve_items[@]}"; do
			if [[ "$item" == "$preserve_item" ]]; then
				should_preserve=true
				break
			fi
		done

		# If not preserved, mark for deletion
		if [[ "$should_preserve" == false ]]; then
			items_to_delete+=("$item")
		fi
	done

	# Delete items that should not be preserved
	if [[ ${#items_to_delete[@]} -gt 0 ]]; then
		einfo "Removing non-essential files/directories: ${items_to_delete[*]}"
		rm -rf "${items_to_delete[@]}" || { eerror "Failed to clean up source directory"; eend 1; return 1; }
	else
		einfo "No items to clean up"
	fi

	popd >/dev/null || exit 1
	eend $?
}

# Function to clean up unwanted binaries from node_modules
# based on guidance from SUSE's electron packaging guidelines
# https://en.opensuse.org/openSUSE:Packaging_Electron
vendor-node-modules_clean_node_modules() {
	ebegin "Cleaning up unwanted binaries from node_modules"

	local target_dir="${S}/node_modules"
	if [[ ! -d "$target_dir" ]]; then
		eerror "Directory $target_dir not found!"
		eend 1
		return 1
	fi

	pushd "$target_dir" >/dev/null || { eerror "Failed to enter $target_dir"; eend 1; return 1; }

	# Remove known binary file types
	find . -name '*.node' -print -delete
	find . -name '*.jar' -print -delete
	find . -name '*.dll' -print -delete
	find . -name '*.exe' -print -delete
	find . -name '*.dylib' -print -delete
	find . -name '*.so' -print -delete
	find . -name '*.o' -print -delete
	find . -name '*.a' -print -delete
	find . -name '*.wasm' -print -delete

	# Remove any remaining ELF/Mach-O/PE binaries (excluding scripts)
	if command -v sponge >/dev/null 2>&1; then
		find . -type f | sponge | \
			xargs -P"$(nproc)" -- sh -c '
				for f; do
					out=$(file -S "$f")
					if [[ "$out" != *": "*script* ]] && [[ "$out" == *": "*executable* ]]; then
						echo "$out" >&2
						rm -fv "$f"
					fi
				done
			' _
	else
		find . -type f | while read -r f; do
			out=$(file -S "$f")
			if [[ "$out" != *": "*script* ]] && [[ "$out" == *": "*executable* ]]; then
				echo "$out" >&2
				rm -fv "$f"
			fi
		done
	fi

	popd >/dev/null || exit 1
	eend $?
}

vendor-node-modules_create_tarball() {
	ebegin "Creating vendor tarball"

	# Change to WORKDIR to create tarball with proper directory structure
	pushd "$WORKDIR" >/dev/null || { eerror "Failed to change to ${WORKDIR}"; eend 1; return 1; }

	# Get the basename of the source directory (e.g., "foo-1.2.3" from "/path/to/workdir/foo-1.2.3")
	local source_dirname
	source_dirname=$(basename "$S")

	vendor_common_embed_scripts "${source_dirname}" "${0}" "$(dirname "${BASH_SOURCE[0]}")/{vendor-node-modules.bashlib,vendor-common.bashlib}"

	# Create tarball so that node_modules is unpacked into ${S} directly
	tar "${REPRODUCIBLE_TAR_ARGS[@]}" -caf "${dir}/${P}-vendor.tar.xz" "${source_dirname}/"
	local tar_result=$?

	popd >/dev/null || exit 1
	eend ${tar_result} || die "Creating tarball failed!"

	einfo "Vendor tarball created at ${dir}/${P}-vendor.tar.xz"
}

vendor-node-modules() {
	vendor-node-modules_setup_environment "$@"
	vendor_common_detect_source_directory "package.json" "pnpm-lock.yaml" "yarn.lock" "package-lock.json" ||
		die "Failed to detect source directory"
	vendor-node-modules_generate_vendor "$@"
	vendor-node-modules_clean_node_modules "$@"
	vendor-node-modules_clean_source_directory "$@"
	vendor-node-modules_create_tarball "$@"
}
