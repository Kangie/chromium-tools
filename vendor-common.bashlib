#!/usr/bin/env bash
# Common library functions for vendor tarball generation scripts
# Shared between vendor-node-modules.bashlib and make-golang-vendor.bashlib

. /lib/gentoo/functions.sh || { echo "Failed to source functions.sh!" ; exit 1 ; }
. "$(pkg-config iwdevtools --variable=atomf)" || { echo "Failed to source iwdevtools' atomf!" ; exit 1 ; }

DEFAULT_DATE_EPOCH="938995200" # Happy Birthday, Gentoo!

# Helper function to print error message and exit
# We get a form of this from functions.sh, but it's not pretty.
die() {
	eerror "$*"
	exit 1
}

# Function to get commit date from GitHub tag
get_github_tag_date() {
	local repo="$1"
	local tag="$2"

	if [[ -z "$repo" || -z "$tag" ]]; then
		eerror "Usage: get_github_tag_date <repo> <tag>"
		eerror "Example: get_github_tag_date 'foo/bar' 'v1.2.3'"
		return 1
	fi

	einfo "Fetching commit date for tag ${tag} from GitHub repo ${repo}..."

	# Use GitHub API to get tag information
	local api_url="https://api.github.com/repos/${repo}/git/refs/tags/${tag}"
	local tag_sha=$(curl -s "${api_url}" | grep '"sha"' | head -1 | cut -d'"' -f4)

	if [[ -z "$tag_sha" ]]; then
		ewarn "Could not fetch tag SHA for ${tag}, trying direct tag API..."
		api_url="https://api.github.com/repos/${repo}/tags"
		tag_sha=$(curl -s "${api_url}" | grep -A5 "\"name\": \"${tag}\"" | grep '"sha"' | head -1 | cut -d'"' -f4)
	fi

	if [[ -n "$tag_sha" ]]; then
		einfo "Found tag SHA: ${tag_sha}"

		# First check if this is a lightweight tag (points directly to commit) or annotated tag
		local ref_type=$(curl -s "${api_url}" | grep '"type"' | head -1 | cut -d'"' -f4)

		if [[ "$ref_type" == "commit" ]]; then
			# Lightweight tag - get commit date directly
			einfo "Lightweight tag detected, getting commit date directly"
			local commit_url="https://api.github.com/repos/${repo}/git/commits/${tag_sha}"
			local commit_date=$(curl -s "${commit_url}" | grep '"date"' | head -1 | cut -d'"' -f4)

			if [[ -n "$commit_date" ]]; then
				local epoch_date=$(date -d "${commit_date}" +%s 2>/dev/null)
				if [[ -n "$epoch_date" ]]; then
					einfo "Setting SOURCE_DATE_EPOCH to ${epoch_date} (${commit_date})"
					export SOURCE_DATE_EPOCH="$epoch_date"
					return 0
				fi
			fi
		else
			# Annotated tag - try to get the date from the tag object itself
			local tag_url="https://api.github.com/repos/${repo}/git/tags/${tag_sha}"
			local tag_date=$(curl -s "${tag_url}" | grep '"date"' | head -1 | cut -d'"' -f4)

			if [[ -n "$tag_date" ]]; then
				# Convert ISO 8601 date to epoch
				local epoch_date=$(date -d "${tag_date}" +%s 2>/dev/null)
				if [[ -n "$epoch_date" ]]; then
					einfo "Setting SOURCE_DATE_EPOCH to ${epoch_date} (${tag_date})"
					export SOURCE_DATE_EPOCH="$epoch_date"
					return 0
				fi
			else
				# Fallback: try to get the commit date
				einfo "No date in tag object, trying commit date..."
				local commit_sha=$(curl -s "${tag_url}" | grep '"sha"' | tail -1 | cut -d'"' -f4)
				if [[ -n "$commit_sha" ]]; then
					local commit_url="https://api.github.com/repos/${repo}/git/commits/${commit_sha}"
					local commit_date=$(curl -s "${commit_url}" | grep '"date"' | head -1 | cut -d'"' -f4)

					if [[ -n "$commit_date" ]]; then
						local epoch_date=$(date -d "${commit_date}" +%s 2>/dev/null)
						if [[ -n "$epoch_date" ]]; then
							einfo "Setting SOURCE_DATE_EPOCH to ${epoch_date} (${commit_date})"
							export SOURCE_DATE_EPOCH="$epoch_date"
							return 0
						fi
					fi
				fi
			fi
		fi
	fi

	ewarn "Failed to fetch commit date for tag ${tag}, using fallback date"
	export SOURCE_DATE_EPOCH=${DEFAULT_DATE_EPOCH}
	return 1
}

# Wrapper function to handle environment preservation for both sudo and doas (but mostly doas)
run_elevated() {
	# Collect environment variables that need to be preserved
	local env_vars=()

	# Core Portage variables
	[[ -n "$PORTAGE_TMPDIR" ]] && env_vars+=("PORTAGE_TMPDIR=$PORTAGE_TMPDIR")
	[[ -n "$PORTAGE_USERNAME" ]] && env_vars+=("PORTAGE_USERNAME=$PORTAGE_USERNAME")
	[[ -n "$PORTAGE_WORKDIR_MODE" ]] && env_vars+=("PORTAGE_WORKDIR_MODE=$PORTAGE_WORKDIR_MODE")

	# Build-related variables
	[[ -n "$ABI_X86" ]] && env_vars+=("ABI_X86=$ABI_X86")
	[[ -n "$MAKEOPTS" ]] && env_vars+=("MAKEOPTS=$MAKEOPTS")
	[[ -n "$EMERGE_DEFAULT_OPTS" ]] && env_vars+=("EMERGE_DEFAULT_OPTS=$EMERGE_DEFAULT_OPTS")

	# Package-specific VENDOR_TARBALL variables (dynamically detect them)
	local var
	for var in $(compgen -v | grep '_VENDOR_TARBALL$'); do
		[[ -n "${!var}" ]] && env_vars+=("$var=${!var}")
	done

	# Language/locale settings
	[[ -n "$LC_ALL" ]] && env_vars+=("LC_ALL=$LC_ALL")
	[[ -n "$LANG" ]] && env_vars+=("LANG=$LANG")

	# If using doas, we need to explicitly pass all environment variables
	# If using sudo, it preserves environment by default with -E, but we'll be explicit since we had to do the work for doas anyway
	if [[ "$ELEVATE_CMD" == "sudo" || "$ELEVATE_CMD" == "doas" ]]; then
		"$ELEVATE_CMD" env "${env_vars[@]}" "$@"
	elif [[ "$ELEVATE_CMD" == "true" ]]; then
		# If ELEVATE_CMD is set to "true", just run the command directly; we're root
		env "${env_vars[@]}" "$@"
	else
		eerror "Unknown elevation command: $ELEVATE_CMD"
		exit 1
	fi
}

# Helper function to run ebuild commands with all necessary environment variables
run_ebuild_with_env() {
	local env_vars=()

	# Build core environment array
	env_vars+=("FEATURES=-test")
	[[ -n "$PORTAGE_TMPDIR" ]] && env_vars+=("PORTAGE_TMPDIR=$PORTAGE_TMPDIR")
	[[ -n "$PORTAGE_USERNAME" ]] && env_vars+=("PORTAGE_USERNAME=$PORTAGE_USERNAME")
	[[ -n "$PORTAGE_WORKDIR_MODE" ]] && env_vars+=("PORTAGE_WORKDIR_MODE=$PORTAGE_WORKDIR_MODE")

	# Include package-specific VENDOR_TARBALL variables
	local var
	for var in $(compgen -v | grep '_VENDOR_TARBALL$'); do
		[[ -n "${!var}" ]] && env_vars+=("$var=${!var}")
	done

	# Run the ebuild command
	env "${env_vars[@]}" ebuild "$@"
}

# Common setup function for vendor tarball generation
# This function sets up common environment variables and configurations
# used by both node-modules and golang vendor generation
vendor_common_setup_environment() {
	local ebuild_file="$1"

	atomset ${ebuild_file} || atomset ${PWD}/${ebuild_file} || die "Failed to run: 'atomset ${ebuild_file}'. Exiting!"

	# Set package-specific VENDOR_TARBALL variable to 0 to avoid use/fetching of vendor tarball during this process
	# Check if a specific package VENDOR_TARBALL variable is already set
	local package_name=${PN^^}
	local vendor_tarball_var="${package_name/-/_}_VENDOR_TARBALL"
	if [[ -z "${!vendor_tarball_var}" ]]; then
		export ${vendor_tarball_var}=0
		einfo "Set ${vendor_tarball_var}=0 to avoid fetching vendor tarball during generation"
	fi

	export PORTAGE_TMPDIR=${PORTAGE_TMPDIR:-/tmp/${0##*/}}
	export PORTAGE_USERNAME="$(whoami)"
	export PORTAGE_WORKDIR_MODE="775"

	# Make reproducible tarballs. Clobber timestamps, sort files, and set ownership.
	# Convert epoch to ISO 8601 format for tar --mtime
	local mtime_date="${SOURCE_DATE_EPOCH:-${DEFAULT_DATE_EPOCH}}"
	if [[ "$mtime_date" =~ ^[0-9]+$ ]]; then
		# If it's an epoch timestamp, convert to ISO format
		mtime_date="@${mtime_date}"
	fi
	export REPRODUCIBLE_TAR_ARGS=(
		"--mtime=${mtime_date}"
		"--sort=name"
		"--owner=portage"
		"--group=portage"
	)
	export XZ_DEFAULTS="-9 -T 0"

	if [[ ${PWD} == */${CATEGORY}/${PN} ]] ; then
		# If we're already in the directory with the ebuilds,
		# we can back up instead.
		local repo_path=${PWD}/../..
	else
		local repo_path=${PWD}
	fi

	# Clean up tmpdir if it exists; create it if it doesn't.
	if [[ -d "${PORTAGE_TMPDIR}" ]] ; then
		rm -rf "${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PN} || die "Failed to clean up ${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PN}. Exiting!"
	fi
	mkdir -p "${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PN} || die "Failed to create ${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PN}. Exiting!"

	# We can't guarantee that sudo is installed; but if we find it prefer sudo.
	if [[ ${UID} == "0" ]] ; then
		ELEVATE_CMD="true"
	elif command -v sudo >/dev/null 2>&1; then
		ELEVATE_CMD="sudo"
	elif command -v doas >/dev/null 2>&1; then
		ELEVATE_CMD="doas"
	else
		echo "Error: Neither sudo nor doas is available."
		exit 1
	fi

	# Export common variables that both scripts will use
	export REPO_PATH="$repo_path"
	export WORKDIR="${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/work"
}

# Common function to clean up and prepare manifests and distfiles
vendor_common_cleanup_and_prepare() {
	local tarball_name="$1"  # e.g., "vendor", "deps", or custom name
	local repo_path="$REPO_PATH"

	# Clean up any existing tarball entries for this specific version before regenerating manifest
	# This is important because we might have fetched a 404 page or corrupt file previously.
	local manifest_file="${repo_path}/${CATEGORY}/${PN}/Manifest"
	if [[ -f "$manifest_file" ]]; then
		einfo "Cleaning existing ${P}-${tarball_name}.tar.xz entries from Manifest"
		# Remove lines containing this specific version's tarball
		sed -i "/${P}-${tarball_name}\.tar\.xz/d" "$manifest_file" || true
	fi

	# Remove tarball from distfiles if it exists
	local vendor_tarball="/var/cache/distfiles/${P}-${tarball_name}.tar.xz"
	if [[ -f "$vendor_tarball" ]]; then
		einfo "Removing existing ${tarball_name} tarball: $vendor_tarball"
		rm -f "$vendor_tarball" || true
	fi
}

# Common function to install dependencies and unpack sources
vendor_common_install_and_unpack() {
	local ebuild_file="$1"
	local repo_path="$REPO_PATH"

	# Install dependencies needed for the package
	run_elevated env FEATURES="-test" env PORTDIR_OVERLAY="${repo_path}" emerge --quiet --oneshot --onlydeps =${PF} || die "Installing dependencies for =${PF} failed!"

	# Make sure we have the source files; can't use pkgdev - it'll ignore the envvar
	run_ebuild_with_env "${repo_path}/${ebuild_file}" manifest || die "Failed to update Manifest"
	run_ebuild_with_env "${repo_path}/${ebuild_file}" clean unpack || die "Failed to unpack ${ebuild_file}"

	# Extract S variable from the environment
	S=$(sed -nr 's/^declare -x S="(.*)"/\1/p' "${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/temp/environment)
	export S
}

# Function to detect and set the package source directory for projects with various directory structures
vendor_common_detect_source_directory() {
	local detection_files=("$@")  # Files to look for to identify the correct directory
	local package_dir=""

	# First try the standard ${P} directory
	if [[ -d "${WORKDIR}/${P}" ]]; then
		package_dir="${WORKDIR}/${P}"
	# Then try ${PN} directory
	elif [[ -d "${WORKDIR}/${PN}" ]]; then
		package_dir="${WORKDIR}/${PN}"
	else
		# Look for any directory that contains the specified detection files
		local dir
		for dir in "${WORKDIR}"/*; do
			if [[ -d "$dir" ]]; then
				local found=false
				local detection_file
				for detection_file in "${detection_files[@]}"; do
					if [[ -f "$dir/$detection_file" ]]; then
						found=true
						break
					fi
				done
				if [[ "$found" == true ]]; then
					package_dir="$dir"
					break
				fi
			fi
		done
	fi

	if [[ -z "$package_dir" || ! -d "$package_dir" ]]; then
		eerror "Could not find package directory with detection files (${detection_files[*]}) in ${WORKDIR}"
		eerror "Available directories:"
		ls -la "${WORKDIR}/" >&2
		return 1
	fi

	einfo "Using package directory: ${package_dir}"
	S="${package_dir}"
	export S
	return 0
}

# Common function to embed scripts in tarballs for posterity
vendor_common_embed_scripts() {
	local target_dir="$1"
	local script_files=("${@:2}")  # All remaining arguments are script files to embed

	for script_file in "${script_files[@]}"; do
		if [[ -f "$script_file" ]]; then
			cp "$script_file" "$target_dir/" || die "Failed to embed $(basename "$script_file") within target directory"
			# Set reproducible timestamps on embedded scripts to ensure consistent tarballs
			touch -d "@${SOURCE_DATE_EPOCH:-${DEFAULT_DATE_EPOCH}}" "$target_dir/$(basename "$script_file")"
		fi
	done
}

# Function to extract version from ebuild file
# This consolidates the common pattern across all vendor scripts
# Returns the extracted version via the specified variable name
vendor_common_extract_version() {
	local ebuild_arg="$1"
	local package_prefix="$2"     # e.g., "electron", "esbuild", "vesktop", etc.
	local version_var_name="$3"   # e.g., "ELECTRON_VERSION", "ESBUILD_VERSION", etc.

	local extracted_version=""

	if [[ -f "$ebuild_arg" ]]; then
		# Extract version from ebuild filename
		extracted_version=$(basename "$ebuild_arg" .ebuild | sed "s/^${package_prefix}-//")
		einfo "Extracted version ${extracted_version} from ebuild file: $ebuild_arg"
	elif [[ -n "$ebuild_arg" ]]; then
		# Check if we're in a git repository and try to find the file relative to repo root
		if git rev-parse --show-toplevel >/dev/null 2>&1; then
			repo_root=$(git rev-parse --show-toplevel)
			full_path="${repo_root}/$ebuild_arg"
			if [[ -f "$full_path" ]]; then
				einfo "Found ebuild at repository path: $full_path"
				extracted_version=$(basename "$full_path" .ebuild | sed "s/^${package_prefix}-//")
			else
				ewarn "Could not find ebuild file: $ebuild_arg (tried $full_path)"
				return 1
			fi
		else
			# Try to extract version from the argument directly if it looks like an ebuild name
			if [[ "$ebuild_arg" == *${package_prefix}*.ebuild ]]; then
				einfo "Extracting version from ebuild name: $ebuild_arg"
				extracted_version=$(basename "$ebuild_arg" .ebuild | sed "s/^${package_prefix}-//")
			else
				ewarn "Not in a git repository and could not find ebuild file: $ebuild_arg"
				return 1
			fi
		fi
	else
		eerror "No ebuild file provided or found in the current directory."
		die "Missing ebuild file argument"
	fi

	# Set the version variable
	if [[ -n "$extracted_version" ]]; then
		export ${version_var_name}="$extracted_version"
		einfo "Set ${version_var_name}=${extracted_version}"
		return 0
	else
		ewarn "Failed to extract version from: $ebuild_arg"
		return 1
	fi
}
