#!/usr/bin/env bash
# Borrowed from sam-gentoo-scripts generate-docs.bashlib and adapted for golang modules
# Enhances the logic from https://wiki.gentoo.org/wiki/Writing_go_Ebuilds to automatically generate vendor/deps tarballs
# and create reproducible tarballs following Gentoo wiki guidance.

# Source the common vendor library
. "$(dirname "${BASH_SOURCE[0]}")/vendor-common.bashlib" || { echo "Failed to source vendor-common.bashlib!" ; exit 1 ; }

vendor-golang_setup_environment() {
	vendor_common_setup_environment "$1"

	# Go-specific environment variables
	export GOPROXY=direct
	export GOSUMDB=off
	export GONOSUMDB="*"

	local tarball_suffix
	tarball_suffix=$(get_tarball_suffix)

	# Clean up and prepare manifests and distfiles for tarball
	vendor_common_cleanup_and_prepare "$tarball_suffix"

	# Install dependencies and unpack sources
	vendor_common_install_and_unpack "$1"

	dir=$(mktemp -d)
	mkdir "${dir}/${P}-${tarball_suffix}" || die "Creating ${dir}/${P}-${tarball_suffix} failed"
}

# Function to handle deps mode tarball creation
generate_deps_tarball() {
	local tarball_suffix="$1"

	einfo "Downloading Go module dependencies for ${P} in deps mode"

	# Wiki sez: GOMODCACHE="${PWD}"/go-mod go mod download -modcacherw -x
	export GOMODCACHE="${PWD}/go-mod"

	# Download all dependencies with -modcacherw to make files writable
	go mod download -modcacherw -x || die "go mod download failed!"

	# Copy the go-mod directory to our vendor directory
	if [[ -d "go-mod" ]]; then
		cp -r go-mod "${dir}/${P}-${tarball_suffix}/" || die "Failed to copy go-mod!"
	fi

	# Copy go.mod and go.sum for reference
	copy_go_files "${dir}/${P}-${tarball_suffix}/"
}

# Function to handle vendor mode tarball creation
generate_vendor_tarball() {
	local tarball_suffix="$1"

	einfo "Creating Go vendor directory for ${P}"

	# Clean any existing vendor directory
	rm -rf vendor

	# Create vendor directory
	go mod vendor || die "go mod vendor failed!"

	# create tarball directly from source directory structure
	# this enables src_unpack to take care of getting the vendor directory
	# into the right place
	# The tarball should contain ${P}/vendor, not just vendor
	if [[ -d "vendor" ]]; then
		# Create the tarball directly from the parent directory to get the correct structure
		pushd .. >/dev/null || die "Failed to change to parent directory"

		# Create tarball with the ${P}/vendor structure as per official guidance
		tar "${REPRODUCIBLE_TAR_ARGS[@]}" -caf "${dir}/${P}-${tarball_suffix}.tar.xz" "${P}/vendor" || die "Failed to create vendor tarball!"

		popd >/dev/null || exit 1

		# Mark that we've already created the tarball
		export VENDOR_TARBALL_CREATED=1

		# Output the tarball location
		einfo "Vendor tarball created at: ${dir}/${P}-${tarball_suffix}.tar.xz"

		# Copy go.mod and go.sum for reference (back in package directory)
		copy_go_files "${dir}/${P}-${tarball_suffix}/"
	fi
}

vendor-golang_generate_vendor() {
	local tarball_suffix
	tarball_suffix=$(get_tarball_suffix)

	if [[ "$GOLANG_VENDOR_MODE" == "deps" ]]; then
		ebegin "Generating Go module dependencies for ${P}"
	else
		ebegin "Generating Go vendor directory for ${P}"
	fi

	# Use common detection function to find Go modules (looking for go.mod)
	vendor_common_detect_source_directory "go.mod"

	pushd "$S" >/dev/null || die "Failed to change to ${S}"

	# Check if go.mod exists
	if [[ ! -f "go.mod" ]]; then
		eerror "No go.mod file found in ${S}"
		exit 1
	fi

	# Ensure go.sum exists or generate it
	if [[ ! -f "go.sum" ]]; then
		einfo "No go.sum found, running 'go mod tidy' to generate it"
		go mod tidy || die "go mod tidy failed!"
	fi

	if [[ "$GOLANG_VENDOR_MODE" == "deps" ]]; then
		generate_deps_tarball "$tarball_suffix"
	else
		generate_vendor_tarball "$tarball_suffix"
	fi

	popd >/dev/null || exit 1
	eend ${?} || die "Generating Go ${tarball_suffix} failed!"
}

# Helper function to get tarball suffix based on mode
get_tarball_suffix() {
	if [[ "$GOLANG_VENDOR_MODE" == "deps" ]]; then
		echo "deps"
	else
		echo "vendor"
	fi
}

# Helper function to copy go.mod and go.sum files
copy_go_files() {
	local target_dir="$1"
	cp go.mod go.sum "$target_dir/" || die "Failed to copy go.mod/go.sum!"
}

vendor-golang_create_tarball() {
	local tarball_suffix
	tarball_suffix=$(get_tarball_suffix)

	# Skip if tarball was already created in vendor mode
	if [[ "$VENDOR_TARBALL_CREATED" == "1" ]]; then
		einfo "Go ${tarball_suffix} tarball already created"
		return 0
	fi

	ebegin "Creating Go ${tarball_suffix} tarball"

	# Embed scripts using common function
	vendor_common_embed_scripts "${dir}/${P}-${tarball_suffix}" "${0}" "$(dirname "${BASH_SOURCE[0]}")/{make-golang-vendor.bashlib,vendor-common.bashlib}"

	tar "${REPRODUCIBLE_TAR_ARGS[@]}" -caf "${dir}/${P}-${tarball_suffix}.tar.xz" -C "${dir}" "${P}-${tarball_suffix}/"
	eend ${?} || die "Creating tarball failed!"

	einfo "Go ${tarball_suffix} tarball created at ${dir}/${P}-${tarball_suffix}.tar.xz"
}

# Parse command line options for vendor mode
parse_golang_vendor_options() {
	veinfo "parse_golang_vendor_options called with: $*"
	while [[ $# -gt 0 ]]; do
		veinfo "Processing argument: $1"
		case $1 in
			--mode=*)
				export GOLANG_VENDOR_MODE="${1#*=}"
				einfo "Set mode via --mode= to: ${GOLANG_VENDOR_MODE}"
				if [[ "$GOLANG_VENDOR_MODE" != "vendor" && "$GOLANG_VENDOR_MODE" != "deps" ]]; then
					eerror "Invalid mode: $GOLANG_VENDOR_MODE. Must be 'vendor' or 'deps'"
					exit 1
				fi
				shift
				;;
			--vendor)
				export GOLANG_VENDOR_MODE="vendor"
				einfo "Set mode via --vendor to: ${GOLANG_VENDOR_MODE}"
				shift
				;;
			--deps)
				export GOLANG_VENDOR_MODE="deps"
				einfo "Set mode via --deps to: ${GOLANG_VENDOR_MODE}"
				shift
				;;
			--help|-h)
				einfo "Usage: make-golang-vendor [OPTIONS] <ebuild>"
				einfo "Options:"
				einfo "  --vendor, --mode=vendor  Create vendor directory tarball (default)"
				einfo "  --deps, --mode=deps      Create dependencies cache tarball"
				einfo "  --help, -h               Show this help message"
				exit 0
				;;
			-*)
				eerror "Unknown option: $1"
				exit 1
				;;
			*)
				# This should be the ebuild file, stop parsing options
				einfo "Found non-option argument: $1, stopping option parsing"
				break
				;;
		esac
	done
}

vendor-golang() {
	# Parse options if GOLANG_VENDOR_MODE is not already set
	if [[ -z "$GOLANG_VENDOR_MODE" ]]; then
		parse_golang_vendor_options "$@"
	else
		veinfo "GOLANG_VENDOR_MODE already set to: $GOLANG_VENDOR_MODE"
	fi

	# Remove parsed options from arguments
	if [[ "$*" == *"--mode="* ]] || [[ "$*" == *"--deps"* ]] || [[ "$*" == *"--vendor"* ]]; then
		while [[ $# -gt 0 ]]; do
			case $1 in
				--mode=*|--vendor|--deps|--help|-h)
					shift
					;;
				*)
					break
					;;
			esac
		done
	fi

	einfo "Using Go ${GOLANG_VENDOR_MODE} mode"

	vendor-golang_setup_environment "$@"
	vendor-golang_generate_vendor "$@"
	# in vendor mode the tarball is created in the generate_vendor function
	if [[ "$GOLANG_VENDOR_MODE" == "deps" ]]; then
		vendor-golang_create_tarball "$@"
	fi
}
